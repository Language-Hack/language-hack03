{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/pongsathorn.p/Desktop/language-hack03/src/screens/HomeScreen/HomeScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { firebase } from \"../../firebase/config\";\nexport default function HomeScreen(props, navigation) {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var entityRef = firebase.firestore().collection('entities');\n  var userID = props.extraData.id;\n  useEffect(function () {\n    entityRef.where(\"authorID\", \"==\", userID).orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onAddButtonPress = function onAddButtonPress() {\n    if (entityText && entityText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp\n      };\n      entityRef.add(data).then(function (_doc) {\n        setEntityText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  };\n\n  var onLogoutPress = function onLogoutPress() {\n    firebase.auth().signOut().then(function (response) {\n      navigation.navigate('LoginScreen');\n    }).catch(function (error) {\n      alert(error);\n    });\n  };\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, index, \". \", item.text));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.formContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Add new entity\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setEntityText(text);\n    },\n    value: entityText,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onAddButtonPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, \"Add\")), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onLogoutPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"logout\"))), entities && React.createElement(View, {\n    style: styles.listContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: entities,\n    renderItem: renderEntity,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    removeClippedSubviews: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/pongsathorn.p/Desktop/language-hack03/src/screens/HomeScreen/HomeScreen.js"],"names":["React","useEffect","useState","styles","firebase","HomeScreen","props","navigation","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","userID","extraData","id","where","orderBy","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","push","error","console","log","onAddButtonPress","length","timestamp","FieldValue","serverTimestamp","text","authorID","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","onLogoutPress","auth","signOut","response","navigate","renderEntity","item","index","entityContainer","container","formContainer","input","button","buttonText","listContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\nimport styles from './styles';\nimport { firebase } from '../../firebase/config'\n\nexport default function HomeScreen(props, navigation) {\n\n    const [entityText, setEntityText] = useState('')\n    const [entities, setEntities] = useState([])\n\n    const entityRef = firebase.firestore().collection('entities')\n    const userID = props.extraData.id\n\n    useEffect(() => {\n        entityRef\n            .where(\"authorID\", \"==\", userID)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(\n                querySnapshot => {\n                    const newEntities = []\n                    querySnapshot.forEach(doc => {\n                        const entity = doc.data()\n                        entity.id = doc.id\n                        newEntities.push(entity)\n                    });\n                    setEntities(newEntities)\n                },\n                error => {\n                    console.log(error)\n                }\n            )\n    }, [])\n\n    const onAddButtonPress = () => {\n        if (entityText && entityText.length > 0) {\n            const timestamp = firebase.firestore.FieldValue.serverTimestamp();\n            const data = {\n                text: entityText,\n                authorID: userID,\n                createdAt: timestamp,\n            };\n            entityRef\n                .add(data)\n                .then(_doc => {\n                    setEntityText('')\n                    Keyboard.dismiss()\n                })\n                .catch((error) => {\n                    alert(error)\n                });\n        }\n    }\n\n    const onLogoutPress = () =>{\n        firebase.auth().signOut().then((response) => {\n            navigation.navigate('LoginScreen')\n        })\n        .catch(error => {\n            alert(error)\n        });\n    }\n\n    const renderEntity = ({item, index}) => {\n        return (\n            <View style={styles.entityContainer}>\n                <Text style={styles.entityText}>\n                    {index}. {item.text}\n                </Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.formContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder='Add new entity'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setEntityText(text)}\n                    value={entityText}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>\n                    <Text style={styles.buttonText}>Add</Text>\n                </TouchableOpacity>\n                <TouchableOpacity style={styles.button} onPress={onLogoutPress}>\n                    <Text style={styles.buttonText}>logout</Text>\n                </TouchableOpacity>\n            </View>\n            { entities && (\n                <View style={styles.listContainer}>\n                    <FlatList\n                        data={entities}\n                        renderItem={renderEntity}\n                        keyExtractor={(item) => item.id}\n                        removeClippedSubviews={true}\n                    />\n                </View>\n            )}\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}